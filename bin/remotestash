#!/usr/bin/env python3
#  MIT Licence
#
#  Copyright (c) 2020 Brice Rosenzweig.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#  
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#  
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#  
#

from zeroconf import ServiceBrowser, Zeroconf, ServiceInfo
import hashlib
import mimetypes
import urllib3
import ssl
import uuid
import socket
import os
from contextlib import closing
import time
import argparse
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib import parse
import cgi
from requests import Session, Request
import pwd
import json
import sys
from pprint import pprint


class RemoteStashItem:
    '''
    this class represent information about an item in the stash
    it contains functionality to load from file or other types, ability to output/save/format itself

    it will maintain the data either in text as str or data as bytes
    '''
    def __init__(self,info):
        '''
        info should be a dictionary of meta data. All keys will
        be kept in lower case. 

        Expected keys are:
           content-type: mime-type of the content of the item
           filename: filename for the item if applicable, without path

        '''
        self.info = { k.lower(): v for (k,v) in info.items() }
        self.data = None
        self.text = None

    def __repr__(self):
        return f'RemoteStashItem({self.info})'
    
    def from_file(info,infile):
        '''
        load itself from the data of a file object
        info should contains 'content-type' and 'file' with the name
        '''
        rv = None
        rv = RemoteStashItem(info)
        rv.data = infile.read()
        # If we read a string, (file open without 'b' mode), save in text
        if isinstance( rv.data,str ):
            rv.text = rv.data
            rv.data = None
            
        return rv

    def from_json(jsondata):
        if isinstance( jsondata, bytes):
            return RemoteStashItem.from_data( jsondata, { 'content-type':'application/json' }  )
        else:
            return RemoteStashItem.from_data( jsondata.encode( 'utf-8'), { 'content-type':'application/json' }  )
    
    
    def from_data(data,info):
        rv = RemoteStashItem(info)
        rv.data = data
        
        return rv

    def from_string(text,info):
        rv = RemoteStashItem(info)
        rv.text = text
        
        return rv

    def validate_info(self):
        if 'content-type' not in self.info:
            print( 'Missing Content Type' )

    def encoding(self,strict=False):
        '''
        determine (or guess) the encoding. Will try to parse content-type or
        if strict is False, will guess based on the type of the data 
        '''
        ctype, options = cgi.parse_header( self.info['content-type'] )
        encoding = None
        if 'charset' in options:
            encoding = options['charset']

        if not encoding:
            if ctype.startswith( 'text/' ):
                encoding = 'utf-8'

        if not encoding and not strict:                      
            if ctype.endswith( 'xml' ) or ctype.endswith('json'):
                encoding = 'utf-8'

        return encoding

    def content_type(self):
        return self.info['content-type']
    
    def json_dict(self):
        return self.info

    def from_asset(info,location=None):
        '''
        info should contains 'Content-Type' and 'file'
        '''
        filename = info['filename']
        if location:
            filename = os.path.join( location, filename )
        rv = None
        if os.path.isfile( filename ):
            with open(filename, 'rb') as readf:
                rv = RemoteStashItem.from_file( info, readf )
        else:
            rv = RemoteStashItem(info)
            
        return rv

    def save_asset(self,location):
        data = self.as_data()
        if data:
            assetname = hashlib.sha1(data).hexdigest()
            path = assetname
            if location:
                path = os.path.join( location, path )
            self.info[ 'assetname'] =  assetname
            with open( path, 'wb' ) as of:
                of.write( self.data )

    def clear_file(self,location=None):
        if 'assetnane' in self.info:
            path = self.info['assetname']
            if location:
                path = os.path.join( location, path )
            if os.path.isfile(path ):
                os.remove( path )
            
    def as_str(self):
        if self.text:
            return self.text

        if self.data:
            encoding = self.encoding()
            if encoding:
                return self.data.decode( encoding )

        return None

    def as_data(self):
        if self.data:
            return self.data
        
        if self.text:
            encoding = self.encoding()
            if encoding:
                return self.text.encode( encoding )

        return None
    
    def output(self,outfile=sys.stdout):
        if not self.data and not self.text:
            return
        
        if 'b' in outfile.mode:
            data = self.as_data()
            outfile.write( data )
        else:
            data = self.as_str()
            if data:
                outfile.write( data )
            else:
                data = self.as_data()
                t = self.info['content-type']
                outfile.write( f'{len(data)} bytes of type {t}' )

class RemoteStashLocal:
    '''
    this class implements a locally saved stash of RemoteStashItem
    The stash will be saved by default in ~/.remotestah
    The information of the content of the stash will be saved as contents.json
    will support pull,push,last,status operations
    '''
    
    def __init__(self,args):
        self.args = args
        if 'verbose' in args:
            self.verbose = args.verbose
        else:
            self.verbose = False
        if 'dir' in self.args:
            self.location = self.args['dir']
        else:
            self.location = os.path.expanduser("~/.remotestash")
            if not os.path.isdir( self.location ):
                if self.verbose:
                    print( f'Creating {self.location}' )
                os.makedirs( self.location )
        self.content_file = os.path.join( self.location, 'contents.json' )
        if os.path.isfile( self.content_file ):
            with open( self.content_file ) as jf:
                self.contents = json.load( jf )
        else:
            self.contents = {'items':[]}

        if self.verbose:
            size = len(self.contents['items'])
            print( f'Local Stash {self.location} {size} items' )

    def pull(self):
        if len(self.contents['items']):
            info = self.contents['items'].pop()
            item = RemoteStashItem.from_asset(info,self.location)
            item.clear_file(self.location)
            self.save_content()
            if self.verbose:
                size = len(self.contents['items'])
                print( f'Local Stash pull {item} [{size} items]' )
            
            return item
        else:
            if self.verbose:
                print( f'Local Stash empty no item to pull' )
                

        return None

    def clear(self):
        for c in self.contents['items']:
            item = RemoteStashItem.from_asset(c,self.location)
            item.clear_file()
        if self.verbose:
            size = len(self.contents['items'])
            print( f'Cleared {size}' )
        self.contents['items'] = []
        self.save_content()
            
    
    def status(self):
        total = len( self.contents['items'] )
        rv = {'items_count':total}
        
        if total > 0:
            item = RemoteStashItem.from_filename(self.contents['items'][-1],self.location)
            if self.verbose:
                print( item.info )
                print( item.as_data() )
            if item.as_data():
                rv['last'] = {'bytes': len(item.as_data()), 'content-type':item.info['content-type'] }
            else:
                rv['last'] = {'bytes': 0, 'content-type':item.info['content-type'] }
        else:                
            rv['last'] = {'bytes': 0, 'content-type':'empty' }
        return rv
            
    def last(self):
        if len(self.contents['items']):
            item = RemoteStashItem.from_asset(self.contents['items'][-1],self.location)
            return item

        return None

    def push(self,item):
        item.save_asset(self.location)
        self.contents['items'].append( item.json_dict() )
        if self.verbose:
            size = len(self.contents['items'])
            print( f'Local Stash pushed {item} [{size} items]' )
        self.save_content()

    def save_content(self):
        with open( self.content_file, 'w' ) as jf:
            json.dump( self.contents, jf )


class RemoteStashClient:
    def __init__(self,cmd,args):
        self.cmd = cmd
        self.args = args
        if args.verbose:
            self.verbose = args.verbose
        else:
            self.verbose = False
            
    def remove_service(self, zeroconf, type, name):
        if self.verbose:
            print( f'Service {name} removed' )

    def add_service(self, zeroconf, type, name):
        if not self.args.name or self.args.name in name:
            info = zeroconf.get_service_info(type, name)
            self.ip = socket.inet_ntoa(info.addresses[0])
            self.port = info.port
            self.info = info
            self.properties = {}
            for (k,v) in info.properties.items():
                self.properties[k.decode('utf-8')] = v.decode('utf-8')
            if self.verbose:
                print( f'Found Service {info.name} added, running {self.cmd} on {self.ip}:{self.port} {self.properties}')
            getattr(self,self.cmd)()
        else:
            if self.verbose:
                info = zeroconf.get_service_info(type, name)
                self.ip = socket.inet_ntoa(info.addresses[0])
                self.port = info.port
                self.info = info
                print( f'Skipping Service {name} on {self.ip}:{self.port}')
            
    def item_from_response(self,response):
        try:
            ctype = response.headers['Content-Type']
            return RemoteStashItem.from_data( response.content, { 'content-type': ctype } )
        except:
            return None

    def get(self,path):
        self.session = Session()
        ip = self.ip
        port = self.port
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        url = f'https://{ip}:{port}/{path}'
        if self.verbose:
            print( f'starting GET {url}' )
        response = self.session.get( url, verify=False )
        return response
    
    def post(self,path,data):
        self.session = Session()
        ip = self.ip
        port = self.port
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        url = f'https://{ip}:{port}/{path}'
        headers = {}
        if self.filename:
            if self.verbose:
                print( 'starting POST {} file {} {}'.format(url,self.filename,self.content_type) )
            files = {'file':(self.filename, data, self.content_type) } 
            response = self.session.post( url, verify=False, files = files, headers = headers )
        else:
            if self.content_type:
                headers[ 'Content-Type'] =  self.content_type
            if self.verbose:
                print( 'starting POST {}  data {}'.format(url,self.filename,self.content_type) )
            response = self.session.post( url, verify=False, data = data, headers = headers )
        return response

    def list(self):
        name = self.info.name
        if name.endswith( '._remotestash._tcp.local.' ):
            name = name[:len('._remotestash._tcp.local.')]
        print( f'Found "{name}" from {self.info.server} on {self.ip}:{self.port}')
        # don't exit to find more services
    
    def push(self):
        response = self.post('push',self.content)
        print( response.content )
        self.exit()

    def pull(self):
        response = self.get('pull')
        item = self.item_from_response( response )
        item.output(self.outfile)
        self.exit()

    def last(self):
        response = self.get('last')
        # if binary use response.content
        item = self.item_from_response( response )
        if item:
            item.output(self.outfile)
        self.exit()
        
    def status(self):
        response = self.get('status')
        item = self.item_from_response( response )
        item.output(self.outfile)
        self.exit()

    def exit(self):
        sys.stdout.flush()
        if self.outfile:
            self.outfile.flush()
        os._exit(0)
        
class RemoteStashServerAdvertiser:
    def __init__(self,port=None):
        self.ip = self.get_ip()
        self.port = port if port else self.get_port() 
        
    def get_ip(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            # doesn't even have to be reachable
            s.connect(('10.255.255.255', 1))
            IP = s.getsockname()[0]
        except:
            IP = '127.0.0.1'
        finally:
            s.close()
        return IP

    def get_name(self):
        aa = pwd.getpwuid( os.getuid() )
        # could use pw_gecos
        return aa.pw_name
    
    def get_port(self):
        with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
            s.bind(('', 0))
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            return s.getsockname()[1]
    
    def start_advertisement(self,name):
        self.info = ServiceInfo(
            "_remotestash._tcp.local.",
            "{}._remotestash._tcp.local.".format(name),
            addresses=[socket.inet_aton(self.ip)],
            port=self.port,
            server=socket.gethostname() + '.local.',
            properties={"temporary":"no", "uuid":str(uuid.uuid4())},
        )

        zeroconf = Zeroconf()
        zeroconf.register_service(self.info)

    def clean_advertisement(self):
        zeroconf = Zeroconf()
        zeroconf.unregister_service(self.info)
        zeroconf.close() 
    
class RemoteStashServer(BaseHTTPRequestHandler):
    def push(self):
        if self.body is None:
            pass

        stash = RemoteStashLocal({})
        info = { 'content-type': self.headers['Content-Type'] }
        item = RemoteStashItem.from_data( self.body, info )
        stash.push( item )
        rv = RemoteStashItem.from_json( json.dumps( {'success':1} ) )
        self.respond_item( rv )

    def pull(self):
        stash = RemoteStashLocal({})
        item = stash.pull()
        self.respond_item( item )
        
    def last(self):
        stash = RemoteStashLocal({})
        item = stash.last()
        self.respond_item( item )

    def status(self):
        stash = RemoteStashLocal({})
        val = stash.status()
        rv = RemoteStashItem.from_json( json.dumps(val) )
        self.respond_item( rv )
        
    def do_POST(self):
        self.do_GET()
        
    def do_GET(self):
        self.breakdown_request()
        if 'debug' in self.query_dict:
            self.request_debug_info()
            return

        response = None
        if self.parsed_path.path.startswith( '/push' ):
            self.push()
        elif self.parsed_path.path.startswith( '/pull' ):
            self.pull()
        elif self.parsed_path.path.startswith( '/last' ):
            self.last()
        elif self.parsed_path.path.startswith( '/status' ):
            self.status()
        else:
            self.respond( 500, {}, '' )
                
    def breakdown_request(self):
        self.parsed_path = parse.urlparse(self.path)
        self.query_dict = parse.parse_qs(self.parsed_path.query)

        self.headers_dict = {}
        for (k,v) in self.headers.items():
            self.headers_dict[ k.lower() ] = v;
        self.filename = None

        ctype, pdict = cgi.parse_header(self.headers['Content-Type'])
        if ctype == 'multipart/form-data':
            pdict['boundary'] = bytes(pdict['boundary'], 'utf-8')
            pdict['content-length'] = int(self.headers['Content-Length'])
            form = cgi.FieldStorage( fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD':'POST', 'CONTENT_TYPE':self.headers['Content-Type'], })
            if 'file' in form:
                record = form['file']
                self.filename = record.filename
                self.body = record.file.read()
                self.content_length = len(self.body)
                self.content_type = record.type
            else:
                self.body = None
                self.content_length = 0
        else:
            if 'content-type' in self.headers_dict:
                self.content_type = self.headers_dict['content-type']
            else:
                self.content_type = None
            if 'content-length' in self.headers_dict:
                self.content_length = int( self.headers_dict.get('content-length') )
                self.body = self.rfile.read(self.content_length)
            else:
                self.body = None
                self.content_length = 0

        if self.content_length > 0:
            if self.filename:
                print( f'Received {self.content_length} bytes, content-type: {self.content_type} filename: {self.filename}' )
            else:
                print( f'Received {self.content_length} bytes, content-type: {self.content_type}' )
            
    def request_debug_info(self):
        parsed_path = self.parsed_path
        message_parts = [
            'CLIENT VALUES:',
            'client_address={} ({})'.format(
                self.client_address,
                self.address_string()),
            'command={}'.format(self.command),
            'path={}'.format(self.path),
            'real path={}'.format(parsed_path.path),
            'query={}'.format(parsed_path.query),
            'query_dict={}'.format(self.query_dict),
            'request_version={}'.format(self.request_version),
            '',
            'SERVER VALUES:',
            'server_version={}'.format(self.server_version),
            'sys_version={}'.format(self.sys_version),
            'protocol_version={}'.format(self.protocol_version),
            '',
            'HEADERS RECEIVED:',
        ]
        for name, value in sorted(self.headers.items()):
            message_parts.append(
                '{}={}'.format(name, value.rstrip())
            )
        message_parts.append('')
        if self.body:
            message_parts.append( f'BODY [{self.content_length} bytes]' )
            message_parts.append( self.body.decode('utf-8') )
            
        message = '\n'.join(message_parts)
        self.respond( 200, { 'Content-type' : 'text/plain; charset=utf-8' }, message )

    def respond_item(self,item):
        if item:
            headers = { 'content-type' : item.info['content-type'] }
            message = item.as_data()

            self.respond( 200, headers, message )
        else:
            self.respond( 200, {}, None )
            
    def respond(self,response_value, headers, content ):
        self.send_response(response_value)
        ctype = None
        if headers:
            for header,value in headers.items():
                if header.lower() == 'content-type':
                    ctype = value
                self.send_header(header,value)
        self.end_headers()
        
        if content:
            self.wfile.write(content if isinstance(content,bytes) else content.encode( 'utf-8' ) )
            print( f'Response: {response_value}, {len(content)} bytes, {ctype}' )
        else:
            print( f'Response: {response_value}' )
            
            
        
class RemoteStash:
    def __init__(self,args=None):
        self.args = args
        self.verbose = True;

    def cmd_listen(self,path = 'last'):
        zeroconf = Zeroconf()
        listener = RemoteStashClient(path,self.args)
        if path == 'push':
            (filename,inputf) = self.get_input_file()
            listener.filename = filename
            listener.content = inputf.read()
            listener.outfile = None
        else:
            listener.filename = None
            listener.content = None
            listener.outfile = self.get_output_file()
        
        listener.content_type = self.get_content_type()
        browser = ServiceBrowser(zeroconf, "_remotestash._tcp.local.", listener)
        time.sleep(self.args.timeout)
        if path != 'list':
            print( 'Failed to find a stash on the local network'  )

    def cmd_serve(self):
        '''
        Will start a local server that will advertise over ZeroConf the service
        and start a web server to enable remote access to the local stash
        '''
        zeroconf = Zeroconf()
        advertiser = RemoteStashServerAdvertiser(int(self.args.port) if self.args.port else None)
        if self.args.name:
            name = self.args.name
        else:
            name = f'{advertiser.get_name()} RemoteStash'
        advertiser.start_advertisement(name)
        port = advertiser.port
        server = HTTPServer((advertiser.ip, port), RemoteStashServer)
        proto = 'http'
        if os.path.isfile( os.path.expanduser( '~/.remotestash/remotestash-key.pem' ) ):
            proto = 'https'
            # certificated created with
            # Will check consistency with the certificate used on other server/app
            #  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout remotestash-key.pem -out remotestash-cert.pem
            server.socket = ssl.wrap_socket( server.socket,
                                             keyfile = os.path.expanduser( '~/.remotestash/remotestash-key.pem' ),
                                             certfile = os.path.expanduser( '~/.remotestash/remotestash-cert.pem' ),
                                             server_side = True )
        else:
            print( f"Couldn't find certificate and key files, please copy the files in the certs directory into ~/.remotestash to continue")
            exit(1)
            
        print(f"Starting server as '{name}' on {proto}://{advertiser.ip}:{port}, use <Ctrl-C> to stop")
        try:
            while True:
                server.handle_request()
        finally:
            advertiser.clean_advertisement()

    def get_input_file(self):
        if 'file' in self.args and self.args.file:
            if os.path.isfile( self.args.file ):
                return (os.path.basename(self.args.file),  open( self.args.file, 'rb' ))
            else:
                return (None,None)
        else:
            return (None,sys.stdin)
        
    def get_content_type(self):
        if self.args.content_type:
            return self.args.content_type

        if 'file' in self.args and self.args.file:
            if os.path.isfile( self.args.file ):
                ct = mimetypes.guess_type( self.args.file )
                if ct[1]:
                    ct = f'{ct[0]}; charset: {ct[1]}'
                else:
                    ct = ct[0]
                return( ct )
            
        return 'text/plain; charset=utf-8'
        
    def get_output_file(self):
        if 'output' in self.args and self.args.output:
            if self.verbose:
                print( f'Saving to {self.args.output}' )
            return open( self.args.output, 'wb' )
        elif 'file' in self.args and self.args.file:
            if self.verbose:
                print( f'Saving to {self.args.file}' )
            return open( self.args.file, 'wb' )
        else:
            return sys.stdout
            
    def cmd_push(self):
        if self.args.local:
            (filename,inputf) = self.get_input_file()
            content_type = self.get_content_type()

            info = {'content-type': content_type }
            if filename:
                info['filename'] = filename
                        
            item = RemoteStashItem.from_file( info, inputf )
            stash = RemoteStashLocal(self.args)
            stash.push( item )
        else:
            self.cmd_listen('push')
            

    def cmd_pull(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            item = stash.pull()
            if item:
                item.output(self.get_output_file())
        else:
            self.cmd_listen('pull')
            
    def cmd_last(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            item = stash.last()
            if item:
                item.output(self.get_output_file())
            else:
                if self.verbose:
                    print( 'Local Stash empty no last item' )
        else:
            self.cmd_listen('last')
            
    def cmd_status(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            status = stash.status()
            item = RemoteStashItem.from_json( json.dumps( status ) )
            item.output( self.get_output_file() )
        else:
            self.cmd_listen('status')

    def cmd_list(self):
        if not self.args.local:
            self.cmd_listen('list')
            
            
    def cmd_clear(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            status = stash.clear()
        else:
            print( 'Clear not implemented for remote' )

    def cmd_test(self):
        a = RemoteStashItem.from_string( 'hello', { 'content-type': 'text/plain; charset=utf-8' } )

        print( a.as_data() )
        print( a.as_str() )
        
            
if __name__ == "__main__":
    commands = {
        'listen':{'attr':'cmd_listen','help':'listen for server'},
        'serve':{'attr':'cmd_serve','help':'start server'},
        'push':{'attr':'cmd_push','help':'push content to stash'},
        'last':{'attr':'cmd_last','help':'push content to stash'},
        'pull':{'attr':'cmd_pull','help':'pull content to stash'},
        'list':{'attr':'cmd_list','help':'list stash'},
        'status':{'attr':'cmd_status','help':'status of stash'},
        'test':{'attr':'cmd_test','help':'random tests'},
        'clear':{'attr':'cmd_clear','help':'clear stash (local only)'},
    }
    
    description = "\n".join( [ '  {}: {}'.format( k,v['help'] ) for (k,v) in commands.items() ] )
    
    parser = argparse.ArgumentParser( description='Remote Copy', formatter_class=argparse.RawTextHelpFormatter )
    parser.add_argument( 'command', metavar='Command', help='command to execute:\n' + description)
    parser.add_argument( '-c', '--content-type', help='content type' )
    parser.add_argument( '-l', '--local', action='store_true', help='use local stash' )
    parser.add_argument( '-n', '--name', help='name for service' )
    parser.add_argument( '-v', '--verbose', action='store_true', help='verbose output' )
    parser.add_argument( '-p', '--port', help='port to use if not set will use a free port' )
    parser.add_argument( '-o', '--output', help='output file if not set save to stdout' )
    parser.add_argument( '-t', '--timeout', help='timeout for searching for a RemoteStash on the network', default=5.0, type=float )
    parser.add_argument( 'file',    metavar='FILE', nargs='?' )
    args = parser.parse_args()

    command = RemoteStash(args)

    if args.command in commands:
        getattr(command,commands[args.command]['attr'])()
    else:
        print( 'Invalid command "{}"'.format( args.command) )
        parser.print_help()
