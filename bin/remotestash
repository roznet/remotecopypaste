#!/usr/bin/env python3
#  MIT Licence
#
#  Copyright (c) 2020 Brice Rosenzweig.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#  
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#  
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#  
#

from zeroconf import ServiceBrowser, Zeroconf, ServiceInfo
import hashlib
import mimetypes
import urllib3
import ssl
import uuid
import socket
import os
from contextlib import closing
import time
import argparse
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib import parse
import cgi
from requests import Session, Request
import pwd
import json
import sys
from pprint import pprint

# certificated created with
#  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout remotestash-key.pem -out remotestash-cert.pem
# These need to be the same as the file remotestash-key and remotestash-cert that will be used by the ios app
# This is not intended to be highly secure, as clearly the key is available freely, but just to ensure
# ssl communication between the ios App, servers and/or cli commands

# content of file remotestash-key.pem
cert_remotestash_key = '''-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDhThz9C8oU30YU
1LTo37NLVUWVFG+W+DiEfFLChMDnTYjjcw2Z3ncUwAjDAEQ8ljc0t5Qh2IjdBFr4
ROQWH/fXue4MLGmq+cdxD/RITXX6LWUbVz/c1yXaxjGLSL/FZzpDpKzmv+geHVCi
+di/8W1ZbFbwLhj5o/FxXoIU0iD76Q3l7ymeSszEs/XTbNWHOhGmMf+fwvqBK2eh
uw3IHtAlK+apJvUaKlBKmSiHrhbQyH0VaM0zKTi8pFDV3yA+1aEPUOZkXC4qu30X
0j/ZP+j/UvNMyALX8RLaG55EB0NgCk/Cj2Zft8VdupP3ot/ZlTtrC41Lj2gwT1ym
5W5GIXM5AgMBAAECggEBAIO794khTov7rG9bm1eaDKxcdG3hYAnGos0cIAuqMVxM
4mATEn3ILJpOWhEiY8OFFUxWll9fy05nUIVfSnmBQZm6Fey6PyKAH1QFPxDTccrQ
phBhaG7IwVJ0ld1ZsP9MBy4r6AiXZrHM9CwGp+w6znP9u6t9WI8Gg5KE7swbvLtt
BR6bXBlxMqGCtTChYfGUj2pUWZtNSUHSjZruAOIGXVDvc5PwwwqZVBf/JvDRWSm0
QAoI6RlEBgG9aBBWYqnEHyWt/2Fj5Vexk2k+yYq15fuQgCq0ZsMJ+Pc4XcOEBU9/
lIxl50ujBjiuikBniDuPZr73WUbKXEVnma5XSilxrJ0CgYEA8lITd0NjCD5Cr0Sq
tOj3v86qYJAglnF6Wp7u9UF3mzgNQtxLVCC26EyPqtQBJ58j6DBHebaJEOh6YVXx
PJ2iF5bmbfJWXe6I0N0u6P0651UOzakeGi6iGccbv4USuBGgdWK0Bf1YPjNMPDPT
BTegtzX3pJb6fTMKhfLitkHR4eMCgYEA7gYi1CXPtbPXuGpiaj9BW5Hgs/eth9e8
HjQ3qfj8auQz0jPAsS31h4evj86SARyCRxNeOGiVH7MqLx2ZTdiXyf6VqUQLO7mA
t3lV7JC0VOrppQNm4K5848gGmrrazeqrpRNTaWgHlVuOZcZaIMzO13J3dRZWRaRh
2/zwH3anMTMCgYBMC7PuLqiqkpds15jW83GksR/I9BI2BGDIha4qK6R0gs+uluHR
Af9EwZoomyXNoGStXlFgAgfb1YlqeIUfZ7zRuFqSUIYILm6jVXZ+SdItfQULR7KZ
tt7KRjEQFpv8RhPcIuCqLIp/4qtfDUiBD6cROA+CiJsNpXH8/W9mkRtjzwKBgAVC
TXKygyxYlOOWNiZyz1bemkBfsI3Xzmg8bx5qSelysVJrok5H3azo6pAa2E79+kLn
wqUsal8Q7lWsKb72kiP8ZAIhZr4jExz6qVNYvyNBLXhf4t4D/O5rdPnmNv9lt/Ul
wCoMCl7abwMApu0imU9ZUBpeK/nN7/uUUxne3ULRAoGAfFC9+zunG65W3hmZ5F2R
XSM9Iqx/aekIsFBIsdzFv5n32m/z0Qwjji2ajc0+5zBA6WzquAp00EMWyzMN0rtB
wfregVGP+kggaiDis0Xa64qyXgCPktz99eIn6sZxJwB7Bz/lYNTXLhd7DYZn1y2w
SrzfyOOhBWKOyeRWsgcDutg=
-----END PRIVATE KEY-----

'''

# content of file remotestash-cert-signed.pem
cert_remotestash_cert = '''-----BEGIN CERTIFICATE-----
MIIDCjCCAfICCQCYTjHvfdmGITANBgkqhkiG9w0BAQsFADBGMQswCQYDVQQGEwJV
UzEWMBQGA1UECgwNUmVtb3RlU3Rhc2hDQTELMAkGA1UECwwCQ0ExEjAQBgNVBAMM
CWF1dGhvcml0eTAeFw0yMTAyMTMxMDUzMjdaFw0zMTAyMTExMDUzMjdaMEgxCzAJ
BgNVBAYTAlVTMRQwEgYDVQQKDAtSZW1vdGVTdGFzaDEPMA0GA1UECwwGc2VydmVy
MRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDhThz9C8oU30YU1LTo37NLVUWVFG+W+DiEfFLChMDnTYjjcw2Z3ncUwAjD
AEQ8ljc0t5Qh2IjdBFr4ROQWH/fXue4MLGmq+cdxD/RITXX6LWUbVz/c1yXaxjGL
SL/FZzpDpKzmv+geHVCi+di/8W1ZbFbwLhj5o/FxXoIU0iD76Q3l7ymeSszEs/XT
bNWHOhGmMf+fwvqBK2ehuw3IHtAlK+apJvUaKlBKmSiHrhbQyH0VaM0zKTi8pFDV
3yA+1aEPUOZkXC4qu30X0j/ZP+j/UvNMyALX8RLaG55EB0NgCk/Cj2Zft8VdupP3
ot/ZlTtrC41Lj2gwT1ym5W5GIXM5AgMBAAEwDQYJKoZIhvcNAQELBQADggEBAKVz
AC24kwtwiixKOrb6Kp9Jk4fUIV7LOKn5YXa4Gr4oO57kq79cYQ9DTB7NC354mVF2
DVrmggLA/ST909aPlk+2kM8jSEKIbqNF9bMaPiygCD9+BnJFAsdUmiTpJvd68cQI
pEbtdVZ3cdUsJubUJ6eNEzOrBUYgW4DHjbLq22QmjXdkNcxFZEgeIatNu07+yu1P
nxLaHcnlRYYd+RfYTYMxK1ymAyvN4DR04kwgsBNG+HdRibbVkgzk5oFsYUScJ4aQ
gK1RbbZTLW3mqhwuC393ysqDjZvcOmr6gb7D5SqXIPBpALfvkVoo2Slxz7m+Ai0o
OQ5YocjfiO5vdo9PknU=
-----END CERTIFICATE-----
'''

def ensure_remote_stash_dir(location = '~/.remotestash'):
    '''
    ensure storage directory and certicates exists
    return tuple with the location and asset location to use
    '''
    location_dir = os.path.expanduser(location)
    location_asset_dir = os.path.join( location_dir, 'assets' )
    if not os.path.isdir( location_asset_dir ):
        os.makedirs( location_asset_dir )

    cert_file = os.path.join( location_dir, 'remotestash-cert.pem' )
    if not os.path.isfile( cert_file ):
        with open( cert_file, 'w' ) as cf:
            cf.write( cert_remotestash_cert )

    key_file = os.path.join( location_dir, 'remotestash-key.pem' )
    if not os.path.isfile( key_file ):
        with open( key_file, 'w') as kf:
            kf.write( cert_remotestash_key )
            
    return (location_dir, location_asset_dir)

class RemoteStashItem:
    '''
    this class represent information about an item in the stash
    it contains functionality to load from file or other types, ability to output/save/format itself

    it will maintain the data either in text as str or data as bytes
    '''
    def __init__(self,info):
        '''
        info should be a dictionary of meta data. All keys will
        be kept in lower case. 

        Expected keys are:
           content-type: mime-type of the content of the item
           filename: filename for the item if applicable, without path

        '''
        self.info = { k.lower(): v for (k,v) in info.items() }
        self.data = None
        self.text = None

    def __repr__(self):
        return f'RemoteStashItem({self.info})'


    def info_from_headers(headers):
        info = {}
        if 'content-type' in headers:
            ctype, pdict = cgi.parse_header(headers['content-type'])
        else:
            ctype, pdict = 'application/octet-stream', {}
            
        info['content-type'] = ctype
        
        encoding = None
        if 'charset' in pdict:
            info['encoding'] = pdict['charset']
        elif ctype.startswith( 'text/' ):
            info['encoding'] = 'utf-8'
        
        if 'content-disposition' in headers:
            cdisp, ddict = cgi.parse_header(headers['content-disposition'] )
            if 'filename' in ddict:
                info['filename'] = ddict['filename']

        return info
    
    def from_file(info,infile):
        '''
        load itself from the data of a file object
        info should contains 'content-type' and 'file' with the name
        '''
        rv = None
        rv = RemoteStashItem(info)
        rv.data = infile.read()
        # If we read a string, (file open without 'b' mode), save in text
        if isinstance( rv.data,str ):
            rv.text = rv.data
            rv.data = None
            
        return rv

    def from_json(jsondata):
        if isinstance( jsondata, bytes):
            return RemoteStashItem.from_data( jsondata, { 'content-type':'application/json' }  )
        else:
            return RemoteStashItem.from_data( jsondata.encode( 'utf-8'), { 'content-type':'application/json', 'encoding':'utf-8' }  )
    
    def from_data(data,info):
        rv = RemoteStashItem(info)
        rv.data = data
        
        return rv

    def from_string(text,info):
        rv = RemoteStashItem(info)
        rv.text = text
        
        return rv

    def validate_info(self):
        if 'content-type' not in self.info:
            print( 'Missing Content Type' )

    def encoding(self):
        '''
        determine (or guess) the encoding. Will try to parse content-type or
        if strict is False, will guess based on the type of the data 
        '''
        if 'encoding' in self.info:
            return self.info['encoding']
        return None

    def content_type(self):
        return self.info['content-type']

    def filename(self):
        '''
        if filename was linked to the data return it, otherwise None (for text for ex)
        '''
        if 'filename' in self.info:
            return self.info['filename']
        else:
            return None
        
    def json_dict(self):
        return self.info

    def from_asset(info,location):
        '''
        info should contains 'Content-Type' and 'assetname'
        '''
        rv = None
        if location and 'assetname' in info:
            filename = os.path.join( location, info['assetname'] )
            if os.path.isfile( filename ):
                with open(filename, 'rb') as readf:
                    rv = RemoteStashItem.from_file( info, readf )
                    
        if not rv:
            rv = RemoteStashItem(info)
            
        return rv

    def save_asset(self,location):
        data = self.as_data()
        if data:
            assetname = hashlib.sha1(data).hexdigest()
            path = assetname
            path = os.path.join( location, path )
            self.info[ 'assetname'] =  assetname
            with open( path, 'wb' ) as of:
                of.write( self.data )

    def clear_asset(self,location):
        if 'assetname' in self.info:
            path = self.info['assetname']
            if location:
                path = os.path.join( location, path )
            if os.path.isfile(path ):
                os.remove( path )
            
    def as_str(self):
        if self.text:
            return self.text

        if self.data:
            encoding = self.encoding()
            if encoding:
                return self.data.decode( encoding )

        return None

    def as_data(self):
        if self.data:
            return self.data
        
        if self.text:
            encoding = self.encoding()
            if encoding:
                return self.text.encode( encoding )

        return None
    
    def output(self,outfile=sys.stdout):
        if not self.data and not self.text:
            return
        
        if 'b' in outfile.mode:
            data = self.as_data()
            outfile.write( data )
        else:
            data = self.as_str()
            if data:
                outfile.write( data )
            else:
                data = self.as_data()
                t = self.info['content-type']
                outfile.write( f'{len(data)} bytes of type {t}' )

class RemoteStashLocal:
    '''
    this class implements a locally saved stash of RemoteStashItem
    The stash will be saved by default in ~/.remotestah
    The information of the content of the stash will be saved as contents.json
    will support pull,push,last,status operations
    '''
    
    def __init__(self,args):
        self.args = args
        if 'verbose' in args:
            self.verbose = args.verbose
        else:
            self.verbose = False
        
        if 'dir' in self.args:
            self.location = self.args['dir']
        else:
            self.location = os.path.expanduser("~/.remotestash")

        (self.location, self.location_assets) = ensure_remote_stash_dir(self.location)

        self.content_file = os.path.join( self.location, 'contents.json' )
        if os.path.isfile( self.content_file ):
            with open( self.content_file ) as jf:
                self.contents = json.load( jf )
        else:
            self.contents = {'items':[]}

        if self.verbose:
            size = len(self.contents['items'])
            print( f'Local Stash {self.location} {size} items' )

    def pull(self):
        '''
        pull an item from a local stash, will return it and delete from the stash
        return None if no more items
        '''
        if len(self.contents['items']):
            info = self.contents['items'].pop()
            item = RemoteStashItem.from_asset(info,self.location_assets)
            self.clear_asset(item)
            self.save_content()
            if self.verbose:
                size = len(self.contents['items'])
                print( f'Local Stash pull {item} [{size} items]' )
            
            return item
        else:
            if self.verbose:
                print( f'Local Stash empty no item to pull' )

        return None

    def list(self):
        '''
        List the content of the local stash
        '''
        pprint( self.contents )

    def clear_asset(self,item):
        '''
        remove asset for the item, will check if asset not used by another item
        before removing
        '''
        assetname = item.info['assetname']
        remove=True
        # don't remove if asset used by another item
        for other in self.contents['items'][:-1]:
            if 'assetname' in other and other['assetname'] == assetname:
                if self.verbose:
                    print( f'keep asset for {item}' )
                remove=False

        if remove:
            item.clear_asset(self.location_assets)
        
    def clear(self):
        '''
        empty the local stash of all items and assets
        '''
        for c in self.contents['items']:
            item = RemoteStashItem.from_asset(c,self.location_assets)
            self.clear_asset(item)
        if self.verbose:
            size = len(self.contents['items'])
            print( f'Cleared {size}' )
        self.contents['items'] = []
        self.save_content()

    def clean(self):
        '''
        remove any asset that are not associated with an item in the local stash
        '''
        assets = os.listdir(self.location_assets)
        for assetname in assets:
            found = False
            for c in self.contents['items']:
                if c['assetname'] == assetname:
                    found = True

            if not found:
                print( f'{assetname} not found' )
            else:
                print( f'{assetname} found' )
    
    def status(self):
        '''
        status from the local stash
        '''
        total = len( self.contents['items'] )
        rv = {'items-count':total}
        
        if total > 0:
            item = RemoteStashItem.from_asset(self.contents['items'][-1],self.location_assets)
            if self.verbose:
                print( item.info )
            if item.as_data():
                rv['last'] = {'size': len(item.as_data()), 'content-type':item.info['content-type'] }
            else:
                rv['last'] = {'size': 0, 'content-type':item.info['content-type'] }
        else:                
            rv['last'] = {'size': 0, 'content-type':'empty' }
        return rv
            
    def last(self):
        '''
        last from the local stash
        '''
        if len(self.contents['items']):
            item = RemoteStashItem.from_asset(self.contents['items'][-1],self.location_assets)
            return item

        return None

    def push(self,item):
        '''
        push item to the local stash
        '''
        item.save_asset(self.location_assets)

        if len(self.contents['items']) and self.contents['items'][-1]['assetname'] == item.info['assetname']:
            if True: #self.verbose:
                print( f'Skipping adding duplicate of last {item}' )
            return
        
        self.contents['items'].append( item.json_dict() )
        
        if self.verbose:
            size = len(self.contents['items'])
            print( f'Local Stash pushed {item} [{size} items]' )
        self.save_content()

    def __eq__(self,other):
        print( f'checking {self} and {other}' )

        if 'assetname' in self.info and 'assetname' in other.info:
            return self.info['assetname'] == other.info['assetname']

        return False
        
    def save_content(self):
        with open( self.content_file, 'w' ) as jf:
            json.dump( self.contents, jf )

class RemoteStashClient:
    '''
    class to run a zeroconf listener to find a remotestash server to execute a specific action
    when there service is found the method 'cmd' will be executed
    args will be checked for:
       name: filter on service with that name only
       verbose: add output as service are found
    '''
    def __init__(self,cmd,stash):
        self.cmd = cmd
        self.stash = stash
        self.args = stash.args
        if self.args.verbose:
            self.verbose = True
        else:
            self.verbose = False
            
    def remove_service(self, zeroconf, type, name):
        if self.verbose:
            print( f'Service {name} removed' )

    def update_service(self, zeroconf, type, name):
        if self.verbose:
            print( f'Service {name} updated' )
        
    def add_service(self, zeroconf, type, name):
        '''
        Called when a service is found
        Will call the command to run on the service
        unless a name was specified and does not match
        '''
        if not self.args.name or self.args.name in name:
            info = zeroconf.get_service_info(type, name)
            self.ip = socket.inet_ntoa(info.addresses[0])
            self.port = info.port
            self.info = info
            self.properties = {}
            for (k,v) in info.properties.items():
                self.properties[k.decode('utf-8')] = v.decode('utf-8')
            if self.verbose:
                print( f'Found Service {info.name} added, running {self.cmd} on {self.ip}:{self.port} {self.properties}')
            getattr(self,self.cmd)()
        else:
            if self.verbose:
                info = zeroconf.get_service_info(type, name)
                self.ip = socket.inet_ntoa(info.addresses[0])
                self.port = info.port
                self.info = info
                print( f'Skipping Service {name} on {self.ip}:{self.port}')
            
    def item_from_response(self,response):
        '''
        build the item from the http response from the server on the remote stash
        '''
        info = RemoteStashItem.info_from_headers(response.headers)
        return RemoteStashItem.from_data( response.content, info )

    def get(self,path):
        '''
        execute a get request on the server of the found service
        '''
        self.session = Session()
        ip = self.ip
        port = self.port
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        url = f'https://{ip}:{port}/{path}'
        if self.verbose:
            print( f'starting GET {url}' )
        response = self.session.get( url, verify=False )
        return response
    
    def post(self,path,data):
        '''
        execute a post request on the server of the found service
        '''
        self.session = Session()
        ip = self.ip
        port = self.port
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        url = f'https://{ip}:{port}/{path}'
        headers = {}
        if self.filename:
            if self.verbose:
                print( 'starting POST {} file {} {}'.format(url,self.filename,self.content_type) )
            files = {'file':(self.filename, data, self.content_type) } 
            response = self.session.post( url, verify=False, files = files, headers = headers )
        else:
            if self.content_type:
                headers[ 'Content-Type'] =  self.content_type
            if self.verbose:
                print( 'starting POST {}  data {}'.format(url,self.filename,self.content_type) )
            response = self.session.post( url, verify=False, data = data, headers = headers )
        return response

    def list(self):
        '''
        list all the available server found
        '''
        name = self.info.name
        if name.endswith( '._remotestash._tcp.local.' ):
            name = name[:len('._remotestash._tcp.local.')]
        print( f'Found "{name}" from {self.info.server} on {self.ip}:{self.port}')
        # don't exit to find more services
    
    def push(self):
        '''
        execute a push to the server on the service found
        '''
        response = self.post('push',self.content)
        print( response.content )
        self.exit()

    def pull(self):
        '''
        execute a pull to the server on the service found
        '''
        response = self.get('pull')
        item = self.item_from_response( response )
        if item:
            self.outfile = self.stash.get_output_file(item)
            item.output(self.outfile)
        self.exit()

    def last(self):
        '''
        execute a last to the server on the service found
        '''
        response = self.get('last')
        # if binary use response.content
        item = self.item_from_response( response )
        if item:
            self.outfile = self.stash.get_output_file(item)
            item.output(self.outfile)
        self.exit()
        
    def status(self):
        '''
        execute a status to the server on the service found
        '''
        response = self.get('status')
        item = self.item_from_response( response )
        self.outfile = self.stash.get_output_file(item)
        item.output(self.outfile)
        self.exit()

    def exit(self):
        '''
        exit from all thread and ensure all output is flush  
        '''
        sys.stdout.flush()
        if self.outfile:
            self.outfile.flush()
        os._exit(0)
        
class RemoteStashServerAdvertiser:
    '''
    This class advertise the server using zeroconf
    '''
    def __init__(self,port=None):
        self.ip = self.get_ip()
        self.port = port if port else self.get_port() 
        
    def get_ip(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            # doesn't even have to be reachable
            s.connect(('10.255.255.255', 1))
            IP = s.getsockname()[0]
        except:
            IP = '127.0.0.1'
        finally:
            s.close()
        return IP

    def get_name(self):
        aa = pwd.getpwuid( os.getuid() )
        # could use pw_gecos
        return aa.pw_name
    
    def get_port(self):
        with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
            s.bind(('', 0))
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            return s.getsockname()[1]
    
    def start_advertisement(self,name):
        self.info = ServiceInfo(
            "_remotestash._tcp.local.",
            "{}._remotestash._tcp.local.".format(name),
            addresses=[socket.inet_aton(self.ip)],
            port=self.port,
            server=socket.gethostname() + '.local.',
            properties={"temporary":"no", "uuid":str(uuid.uuid4())},
        )

        zeroconf = Zeroconf()
        zeroconf.register_service(self.info)

    def clean_advertisement(self):
        zeroconf = Zeroconf()
        zeroconf.unregister_service(self.info)
        zeroconf.close() 
    
class RemoteStashServer(BaseHTTPRequestHandler):
    '''
    Implement an https server that will process the remotestash protocol using a local stash
    '''
    def push(self):
        if self.body is None:
            pass

        stash = RemoteStashLocal({})
        stash.verbose = True
        info = { 'content-type': self.content_type }
        if self.filename:
            info['filename'] = self.filename
        item = RemoteStashItem.from_data( self.body, info )
        stash.push( item )
        self.respond( 200, { 'content-type' : 'application/json; charset=utf-8' }, json.dumps({'success':1}), log_message=f'Received: {item}' )

    def pull(self):
        stash = RemoteStashLocal({})
        stash.verbose = True
        item = stash.pull()
        self.respond_item( item )
        
    def last(self):
        stash = RemoteStashLocal({})
        stash.verbose = True
        item = stash.last()
        self.respond_item( item )

    def status(self):
        stash = RemoteStashLocal({})
        stash.verbose = True
        val = stash.status()
        rv = RemoteStashItem.from_json( json.dumps(val) )
        self.respond_item( rv )
        
    def do_POST(self):
        self.do_GET()
        
    def do_GET(self):
        self.breakdown_request()

        response = None
        if self.parsed_path.path.startswith( '/push' ):
            self.push()
        elif self.parsed_path.path.startswith( '/pull' ):
            self.pull()
        elif self.parsed_path.path.startswith( '/last' ):
            self.last()
        elif self.parsed_path.path.startswith( '/status' ):
            self.status()
        else:
            self.respond( 500, {}, '' )
                
    def breakdown_request(self):
        self.parsed_path = parse.urlparse(self.path)
        self.query_dict = parse.parse_qs(self.parsed_path.query)

        self.headers_dict = {}
        for (k,v) in self.headers.items():
            self.headers_dict[ k.lower() ] = v;
        self.filename = None

        if 'Content-Type' in self.headers:
            ctype, pdict = cgi.parse_header(self.headers['content-type'])
        else:
            ctype = 'application/octet-stream'

        if 'content-disposition' in self.headers:
            cdisp, ddict = cgi.parse_header(self.headers['content-disposition'] )
            if 'filename' in ddict:
                self.filename = ddict['filename']
            
        if ctype == 'multipart/form-data':
            pdict['boundary'] = bytes(pdict['boundary'], 'utf-8')
            pdict['content-length'] = int(self.headers['Content-Length'])
            form = cgi.FieldStorage( fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD':'POST', 'CONTENT_TYPE':self.headers['Content-Type'], })
            if 'file' in form:
                record = form['file']
                self.filename = record.filename
                self.body = record.file.read()
                self.content_length = len(self.body)
                self.content_type = record.type
            else:
                self.body = None
                self.content_length = 0
        else:
            if 'content-type' in self.headers_dict:
                self.content_type = self.headers_dict['content-type']
            else:
                self.content_type = None
            if 'content-length' in self.headers_dict:
                self.content_length = int( self.headers_dict.get('content-length') )
                self.body = self.rfile.read(self.content_length)
            else:
                self.body = None
                self.content_length = 0

        if self.content_length > 0:
            if self.filename:
                print( f'Received {self.content_length} bytes, content-type: {self.content_type} filename: {self.filename}' )
            else:
                print( f'Received {self.content_length} bytes, content-type: {self.content_type}' )

    def respond_item(self,item):
        if item:
            headers = { 'content-type' : item.info['content-type'] }
            if 'filename' in item.info:
                filename = item.info['filename']
                headers['content-disposition'] = f'attachment; filename="{filename}"'
            message = item.as_data()
            self.respond( 200, headers, message, log_message=f'Request: {item}' )
        else:
            self.respond( 200, {}, None )
            
    def respond(self,response_value, headers, content, log_message=None ):
        self.send_response(response_value)
        if log_message:
            print( log_message )
        ctype = None
        if headers:
            for header,value in headers.items():
                if header.lower() == 'content-type':
                    ctype = value
                    
                self.send_header(header,value)
        self.end_headers()
        
        if content:
            self.wfile.write(content if isinstance(content,bytes) else content.encode( 'utf-8' ) )
            print( f'Response: {response_value}, {len(content)} bytes, {headers}' )
        else:
            print( f'Response: {response_value}' )
        
class RemoteStash:
    def __init__(self,args=None):
        self.args = args
        self.verbose = args.verbose;

    def listen_and_execute(self,path = 'last'):
        '''
        listen to find a server to execute the action in path
        after given timeout if no service found will exit with an error
        '''
        zeroconf = Zeroconf()
        listener = RemoteStashClient(path,self)
        if path == 'push':
            (filename,inputf) = self.get_input_file()
            if inputf:
                listener.filename = filename
                listener.content = inputf.read()
                listener.outfile = None
            else:
                print( "Failed to open input file" )
                listener = None
        else:
            listener.filename = None
            listener.content = None
            listener.outfile = None

        if listener:
            listener.content_type = self.get_input_content_type()
            browser = ServiceBrowser(zeroconf, "_remotestash._tcp.local.", listener)
            time.sleep(self.args.timeout)
            if path != 'list':
                print( 'Failed to find a stash on the local network'  )

    def cmd_serve(self):
        '''
        Will start a local server that will advertise over ZeroConf the service
        and start a web server to enable remote access to the local stash
        '''
        ensure_remote_stash_dir('~/.remotestash')
        zeroconf = Zeroconf()
        advertiser = RemoteStashServerAdvertiser(int(self.args.port) if self.args.port else None)
        if self.args.name:
            name = self.args.name
        else:
            name = f'{advertiser.get_name()} RemoteStash'
        advertiser.start_advertisement(name)
        port = advertiser.port
        server = HTTPServer((advertiser.ip, port), RemoteStashServer)
        proto = 'http'
        if os.path.isfile( os.path.expanduser( '~/.remotestash/remotestash-key.pem' ) ):
            proto = 'https'
            # certificated created with
            # Will check consistency with the certificate used on other server/app
            #  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout remotestash-key.pem -out remotestash-cert.pem
            server.socket = ssl.wrap_socket( server.socket,
                                             keyfile = os.path.expanduser( '~/.remotestash/remotestash-key.pem' ),
                                             certfile = os.path.expanduser( '~/.remotestash/remotestash-cert.pem' ),
                                             server_side = True )
        else:
            print( f"Couldn't find certificate and key files, please copy the files in the certs directory into ~/.remotestash to continue")
            exit(1)
            
        print(f"Starting server as '{name}' on {proto}://{advertiser.ip}:{port}, use <Ctrl-C> to stop")
        try:
            while True:
                server.handle_request()
        finally:
            advertiser.clean_advertisement()

    def get_input_file(self):
        if 'file' in self.args and self.args.file:
            if os.path.isfile( self.args.file ):
                return (os.path.basename(self.args.file),  open( self.args.file, 'rb' ))
            else:
                return (None,None)
        else:
            return (None,sys.stdin)
        
    def get_input_content_type(self):
        if self.args.content_type:
            return self.args.content_type

        if 'file' in self.args and self.args.file:
            if os.path.isfile( self.args.file ):
                ct = mimetypes.guess_type( self.args.file )
                if ct[1]:
                    ct = f'{ct[0]}; charset: {ct[1]}'
                else:
                    ct = ct[0]
                return( ct )
            
        return 'text/plain; charset=utf-8'
        
    def get_output_file(self,item=None):
        '''
        return a file handle of where the output of an item should be written to
        stdout or if applicable the filename from the original item will be use unless overwritten 
        on the command line. '-' as a file name will force output to stdout
        '''
        if item and self.verbose:
            pprint( item )

        if 'file' in self.args and self.args.file:
            if self.args.file == '-':
                if self.verbose:
                    print( f'Sending to stdout' )
                return sys.stdout
            else:
                if self.verbose:
                    print( f'Saving to {self.args.file}' )
                return open( self.args.file, 'wb' )
        else:
            # if no args, just use stdout or filename provided by item
            if item and item.filename():
                if self.verbose:
                    print( f'Saving to {item.filename()}' )
                return open( item.filename(), 'wb' )
            else:
                if self.verbose:
                    print( f'Sending to stdout' )
                return sys.stdout
            
    def cmd_push(self):
        if self.args.local:
            (filename,inputf) = self.get_input_file()
            content_type = self.get_input_content_type()

            info = {'content-type': content_type }
            if filename:
                info['filename'] = filename
                        
            item = RemoteStashItem.from_file( info, inputf )
            stash = RemoteStashLocal(self.args)
            stash.push( item )
        else:
            self.listen_and_execute('push')

    def cmd_pull(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            item = stash.pull()
            if item:
                item.output(self.get_output_file())
        else:
            self.listen_and_execute('pull')
            
    def cmd_last(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            item = stash.last()
            if item:
                item.output(self.get_output_file())
            else:
                if self.verbose:
                    print( 'Local Stash empty no last item' )
        else:
            self.listen_and_execute('last')
            
    def cmd_status(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            status = stash.status()
            item = RemoteStashItem.from_json( json.dumps( status ) )
            item.output( self.get_output_file() )
        else:
            self.listen_and_execute('status')

    def cmd_list(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            status = stash.list()
        else:
            self.listen_and_execute('list')
            
    def cmd_clean(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            stash.clean()
        else:
            print( 'Clean not implemented for remote' )
            
    def cmd_clear(self):
        if self.args.local:
            stash = RemoteStashLocal(self.args)
            status = stash.clear()
        else:
            print( 'Clear not implemented for remote' )

    def cmd_test(self):
        a = RemoteStashItem.from_string( 'hello', { 'content-type': 'text/plain; charset=utf-8' } )

        print( a.as_data() )
        print( a.as_str() )
        
            
if __name__ == "__main__":
    commands = {
        'serve':{'attr':'cmd_serve','help':'start server'},
        'push':{'attr':'cmd_push','help':'push content to stash'},
        'last':{'attr':'cmd_last','help':'get last content from the stash without removing it'},
        'pull':{'attr':'cmd_pull','help':'pull content from the stash'},
        'list':{'attr':'cmd_list','help':'list available stash'},
        'clean':{'attr':'cmd_clean','help':'clean stash from unused assets'},
        'status':{'attr':'cmd_status','help':'status of stash'},
        'test':{'attr':'cmd_test','help':'random tests'},
        'clear':{'attr':'cmd_clear','help':'clear stash (local only)'},
    }
    
    description = "\n".join( [ '  {}: {}'.format( k,v['help'] ) for (k,v) in commands.items() ] )
    
    parser = argparse.ArgumentParser( description='RemoteStash exchange files and data between devices', formatter_class=argparse.RawTextHelpFormatter )
    parser.add_argument( 'command', help='command to execute:\n' + description)
    parser.add_argument( '-c', '--content-type', help='content type' )
    parser.add_argument( '-l', '--local', action='store_true', help='use local stash' )
    parser.add_argument( '-n', '--name', help='name for service' )
    parser.add_argument( '-v', '--verbose', action='store_true', help='verbose output' )
    parser.add_argument( '-p', '--port', help='port to use if not set will use a free port' )
    parser.add_argument( '-t', '--timeout', help='timeout for searching for a RemoteStash on the network', default=5.0, type=float )
    parser.add_argument( 'file',nargs='?', help='file name to read or save, empty or - for stdout/stdin' )
    args = parser.parse_args()

    command = RemoteStash(args)

    if args.command in commands:
        getattr(command,commands[args.command]['attr'])()
    else:
        print( 'Invalid command "{}"'.format( args.command) )
        parser.print_help()
